from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException
from backend.dataset import loader
from backend.recomendador.colaborativo import CollaborativeFilteringRecommender
import pandas as pd

# --- Carregamento e Prepara√ß√£o do Modelo ---
recommender_instance = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Carrega os dados e inicializa o recomendador na inicializa√ß√£o da API."""
    global recommender_instance
    print("üöÄ Iniciando o servi√ßo de recomenda√ß√£o...")
    try:
        ratings_df = loader.load_ratings()
        if not ratings_df.empty:
            recommender_instance = CollaborativeFilteringRecommender(ratings_df)
            recommender_instance.train() # Chama o treinamento explicitamente
            print("‚úÖ Servi√ßo de recomenda√ß√£o iniciado e modelo treinado.")
        else:
            print("‚ö†Ô∏è Aviso: Nenhum dado de avalia√ß√£o encontrado. O servi√ßo de recomenda√ß√£o est√° inativo.")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar o servi√ßo de recomenda√ß√£o: {e}")
    
    yield
    # C√≥digo para limpeza ao desligar a API (se necess√°rio)
    print("üõë Servi√ßo de recomenda√ß√£o finalizado.")

app = FastAPI(
    title="Recommendation Service API",
    description="API para gerar recomenda√ß√µes de produtos com base em Filtragem Colaborativa.",
    version="1.0.0",
    lifespan=lifespan
)

@app.get("/recommend/{cpf_cliente}", tags=["Recommendations"])
def get_recommendations(cpf_cliente: str, n_items: int = 5):
    """
    Gera recomenda√ß√µes de produtos para um cliente espec√≠fico e avalia a acur√°cia.
    """
    if recommender_instance is None:
        raise HTTPException(status_code=503, detail="Servi√ßo de recomenda√ß√£o indispon√≠vel (sem dados).")

    try:
        # Gera recomenda√ß√µes
        recommended_ids = recommender_instance.recommend_items(cpf_cliente, n_items)
        
        # Avalia a acur√°cia
        accuracy_report = recommender_instance.evaluate_accuracy(cpf_cliente)

        return {
            "cpf_cliente": cpf_cliente,
            "recommendations": recommended_ids,
            "accuracy_report": accuracy_report
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro interno ao processar a recomenda√ß√£o: {str(e)}")